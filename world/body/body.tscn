[gd_scene load_steps=5 format=1]

[ext_resource path="res://world/body/body.gd" type="Script" id=1]
[ext_resource path="res://world/voxel/voxel_atlas.png" type="Texture" id=2]

[sub_resource type="MaterialShaderGraph" id=1]

_code = { "fragment":"vec3 nd1sl9=COLOR.rgb;\nvec3 nd1sl5=vec3(UV,0);\nfloat nd1sl10=COLOR.a;\nvec3 DIFFUSE_OUT=vec3(0,0,0);\nfloat ALPHA_OUT=0;\nvec3 nd8sl1def=vec3(1, 1, 1);\nvec3 nd8sl0=mod(nd1sl5,nd8sl1def);\nfloat nd3sl0=40;\nfloat nd5sl0=nd1sl9.x;\nfloat nd5sl1=nd1sl9.y;\nfloat nd5sl2=nd1sl9.z;\nfloat nd7sl2def=0;\nvec3 nd7sl0=vec3(nd5sl2,nd1sl10,nd7sl2def);\nfloat nd4sl2def=0;\nvec3 nd4sl0=vec3(nd5sl0,nd5sl1,nd4sl2def);\nvec3 nd10sl0=nd8sl0*nd7sl0;\nvec3 nd6sl0=nd10sl0+nd4sl0;\nuniform texture Tex;vec4 rt_read_tex2=tex(Tex,nd6sl0.xy);\nvec3 nd2sl0=rt_read_tex2.rgb;\nfloat nd2sl1=rt_read_tex2.a;\nDIFFUSE_OUT=nd2sl0;\nSPECULAR=nd2sl0;\nSPEC_EXP=nd3sl0;\nDIFFUSE=DIFFUSE_OUT;\n", "fragment_ofs":0, "light":"", "light_ofs":0, "vertex":"", "vertex_ofs":0 }
_data = { "shaders":[ [ 0, 33, Vector2( 350, 40 ), null, null, [  ], 1, 0, Vector2( 50, 40 ), null, null, [  ] ], [ 0, 33, Vector2( 1034, 21 ), null, null, [ 0, 2, 0, 2, 2, 0, 3, 3, 0 ], 1, 0, Vector2( -78, -11 ), null, null, [  ], 2, 30, Vector2( 834, 2 ), "Tex", null, [ 0, 6, 0, 2147483647, 0, null ], 3, 1, Vector2( 847, 219 ), 40.0, null, [  ], 4, 19, Vector2( 314, 515 ), null, null, [ 0, 5, 0, 1, 5, 1, 2147483647, 0, null, 2147483647, 1, null, 2147483647, 2, null ], 5, 18, Vector2( 92, 259 ), null, null, [ 0, 1, 9, 2147483647, 0, null ], 6, 8, Vector2( 666, 117 ), 0, null, [ 0, 10, 0, 1, 4, 0, 2147483647, 0, null, 2147483647, 1, null ], 7, 19, Vector2( 313, 196 ), null, null, [ 0, 5, 2, 1, 1, 10, 2147483647, 0, null, 2147483647, 1, 0.0, 2147483647, 2, 0.0 ], 8, 8, Vector2( 152, -96 ), 4, null, [ 0, 1, 5, 2147483647, 0, null, 2147483647, 1, Vector3( 1, 1, 1 ) ], 9, 34, Vector2( 149, -228 ), "Take the floating part of the UV.\n", null, [  ], 10, 8, Vector2( 482, 64 ), 2, null, [ 0, 8, 0, 1, 7, 0, 2147483647, 0, Vector3( 1, 1, 1 ), 2147483647, 1, null ], 11, 34, Vector2( -70, -149 ), "UV values can go beyond 1 in order to induce repetition\n\nColor and Alpha encode the rect of the texture atlas to display\nx => x\ny => y\nz => w\nalpha => h", null, [  ], 12, 34, Vector2( 296, 64 ), "get the extents of the rect", null, [  ], 13, 34, Vector2( 301, 386 ), "get the offset of the rect", null, [  ], 14, 34, Vector2( 485, -64 ), "Set the UV to the scale of the atlas texture elements", null, [  ], 15, 34, Vector2( 654, -15 ), "Add the offset to the scaled UV", null, [  ] ], [ 0, 33, Vector2( 350, 40 ), null, null, [  ], 1, 0, Vector2( 50, 40 ), null, null, [  ] ] ] }

[sub_resource type="ShaderMaterial" id=2]

flags/visible = true
flags/double_sided = false
flags/invert_faces = false
flags/unshaded = false
flags/on_top = false
flags/lightmap_on_uv2 = false
flags/colarray_is_srgb = false
params/blend_mode = 0
params/depth_draw = 1
params/line_width = 0.0
shader/shader = SubResource( 1 )
shader_param/Tex = ExtResource( 2 )

[node name="Body" type="Spatial"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
script/script = ExtResource( 1 )
voxel_material = SubResource( 2 )


